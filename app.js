// Generated by CoffeeScript 1.7.1
(function() {
  var Animation, addToStage, changeX, disableEditable, enableEditable, goNext, goPrev, key, prompts, removeFromStage, sections, slider, snapBack, stage, startX, startingPos, threshold, typeareas, updateWordCount, value, wordcount;

  window.myLayers = Framer.Importer.load("imported/prompts");

  for (key in myLayers) {
    value = myLayers[key];
    myLayers[key].originalFrame = myLayers[key].frame;
    myLayers[key].originalFrame.screenFrame = myLayers[key].screenFrame;
  }

  Animation = {};

  Animation.onScreen = {
    curve: "bezier-curve",
    curveOptions: [0.4, 0, 0.2, 1],
    time: 0.7
  };

  Layer.prototype.enterRight = function() {
    addToStage(this);
    this.x = 375;
    return this.animate({
      properties: {
        x: 0
      },
      curveOptions: [0.4, 0, 0.2, 1],
      curve: "bezier-curve",
      time: 0.7
    });
  };

  Layer.prototype.exitLeft = function() {
    var exitAnimation;
    exitAnimation = this.animate({
      properties: {
        x: -this.width
      },
      curveOptions: [0.4, 0, 0.2, 1],
      curve: "bezier-curve",
      time: 0.7
    });
    exitAnimation.on(Events.AnimationEnd, function() {
      return removeFromStage(this);
    });
    return exitAnimation;
  };

  stage = new Layer({
    width: 375,
    height: 667,
    backgroundColor: "#82BEF9",
    clip: true
  });

  Layer.prototype.pullIntoLimbo = function() {
    this.superLayer = stage;
    this.x = this.originalFrame.screenFrame.x;
    return this.y = this.originalFrame.screenFrame.y;
  };

  stage.center();

  stage.pixelAlign();

  addToStage = function(layer) {
    layer.superLayer = stage;
    layer.x = layer.originalFrame.x;
    return layer.visible = true;
  };

  removeFromStage = function(layer) {
    layer.superLayer = null;
    return layer.visible = false;
  };

  addToStage(myLayers.section0);

  Animation.stiffSpring = {
    curve: "spring-rk4",
    curveOptions: {
      tension: 100,
      friction: 20,
      velocity: 10
    }
  };

  myLayers.keyboard.states.animationOptions = {
    curve: "bezier-curve",
    curveOptions: [0.4, 0, 0.2, 1],
    time: 0.75
  };

  myLayers.prompt.states.animationOptions = {
    curve: "bezier-curve",
    curveOptions: [0.4, 0, 0.2, 1],
    time: 0.75
  };

  sections = _.filter(myLayers, function(layer) {
    return ~layer.name.indexOf("section");
  });

  typeareas = _.filter(myLayers, function(layer) {
    return ~layer.name.indexOf("typearea");
  });

  prompts = _.filter(myLayers, function(layer) {
    return ~layer.name.indexOf("prompt");
  });

  prompts.forEach(function(element, index) {
    return element.states.animationOptions = {
      curve: "bezier-curve",
      curveOptions: [0.4, 0, 0.2, 1],
      time: 0.75
    };
  });

  typeareas.forEach(function(element, index) {
    var content;
    content = localStorage.getItem('prompt' + index);
    if (content === null || content === void 0) {
      element.html = '<div class="content" id="content' + index + '" contenteditable="true"></div>';
    } else {
      element.html = content;
    }
    return element.ignoreEvents = false;
  });

  myLayers.keyboard.states.add({
    active: {
      y: myLayers.keyboard.originalFrame.y
    },
    inactive: {
      y: 667
    }
  });

  myLayers.keyboard.states.switchInstant("inactive");

  myLayers.keyboard.states["switch"]("active");

  myLayers.keyboard.bringToFront();

  myLayers.keyboard.pullIntoLimbo();

  myLayers.prompt.states.add({
    active: {
      y: myLayers.prompt.originalFrame.y
    },
    inactive: {
      y: -100
    }
  });

  myLayers.prompt.states.switchInstant("inactive");

  myLayers.prompt.states["switch"]("active");

  prompts.forEach(function(element, index) {
    return element.name = "prompt" + index;
  });

  sections.forEach(function(element, index) {
    element.backgroundColor = "#fff";
    element.borderRadius = 10;
    element.states.add({
      "default": {
        scale: 1,
        y: 0,
        shadowY: 0,
        shadowBlur: 0
      },
      back: {
        scale: 0.9,
        y: 20,
        shadowY: 2,
        shadowBlur: 10
      }
    });
    element.states.animationOptions = Animation.stiffSpring;
    return element.shadowColor = "rgba(0, 0, 0, 0.3)";
  });

  myLayers.keyboard.on(Events.Click, function() {
    var animationNext;
    animationNext = goNext();
    return animationNext.on(Events.AnimationEnd, function() {
      var currentPos;
      sections.forEach(function(element, index) {
        return element.states["switch"]("default");
      });
      typeareas.forEach(function(element, index) {
        return localStorage.setItem('prompt' + index, element.html);
      });
      currentPos = slider.states.current.slice(-1);
      return document.getElementById("content" + currentPos).focus();

      /* SET FOCUS FUNCTION, DO THIS WHEN IT GETS BIG */
    });
  });

  slider = new Layer({
    superLayer: stage,
    width: sections.length * 375,
    height: 667,
    backgroundColor: "none"
  });

  sections.forEach(function(element, index) {
    element.visible = true;
    element.superLayer = slider;
    return element.x = index * 375;
  });

  myLayers.keyboard.bringToFront();

  prompts.forEach(function(element, index) {
    return element.on(Events.Click, function() {
      var currentPos;
      if (this.superLayer.states.current === "default") {
        sections.forEach(function(element, index) {
          return element.states["switch"]("back");
        });
        slider.draggable.enabled = true;
        disableEditable();
      } else {
        sections.forEach(function(element, index) {
          return element.states["switch"]("default");
        });
        slider.draggable.enabled = false;
        enableEditable();
        currentPos = slider.states.current.slice(-1);
        document.getElementById("content" + currentPos).focus();
      }
      return updateWordCount();
    });
  });

  disableEditable = function() {
    var element, index, _i, _len, _ref, _results;
    _ref = document.getElementsByClassName('content');
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      element = _ref[index];
      _results.push(element.contentEditable = false);
    }
    return _results;
  };

  enableEditable = function() {
    var element, index, _i, _len, _ref, _results;
    _ref = document.getElementsByClassName('content');
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      element = _ref[index];
      _results.push(element.contentEditable = true);
    }
    return _results;
  };

  startX = 0;

  changeX = 0;

  threshold = 180;

  slider.draggable.speedY = 0;

  slider.on(Events.DragStart, function(event) {
    return startX = event.pageX;
  });

  slider.on(Events.DragMove, function(event) {
    var currentPos;
    changeX = event.pageX - startX;
    currentPos = slider.states.current.slice(-1);
    if (changeX < -threshold) {
      return goNext();
    } else if (changeX > threshold) {
      return goPrev();
    }
  });

  slider.on(Events.DragEnd, function(event) {
    if (changeX > -threshold) {
      if (changeX < threshold) {
        return snapBack();
      }
    }
  });

  wordcount = new Layer({
    width: 375,
    height: 100,
    y: 20,
    backgroundColor: 'none',
    superLayer: stage
  });

  wordcount.html = '<p class="wordcount">Today\'s word count: 730</p>';

  wordcount.sendToBack();

  slider.states.animationOptions = {
    curve: "spring(200,20,10)"
  };

  snapBack = function() {
    var currentPos;
    currentPos = slider.states.current.slice(-1);
    return slider.states["switch"]("pos" + currentPos);
  };

  goNext = function(direction) {
    var currentPos, nextPos;
    currentPos = slider.states.current.slice(-1);
    nextPos = currentPos > sections.length - 2 ? 0 : parseInt(currentPos) + 1;
    return slider.states["switch"]("pos" + nextPos);
  };

  updateWordCount = function() {
    var regex, typetotal, words;
    typetotal = 0;
    words = 0;
    regex = /\s+/gi;
    typeareas.forEach(function(element, index) {
      value = element.html;
      words = value.trim().replace(regex, ' ').split(' ').length - 3;
      typetotal += words;
      return localStorage.setItem('prompt' + index, element.html);
    });
    return wordcount.html = '<p class="wordcount">Today\'s word count: ' + typetotal + '</p>';
  };

  goNext = _.debounce(goNext, 100, true);

  goPrev = function() {
    var currentPos, prevPos;
    currentPos = slider.states.current.slice(-1);
    prevPos = parseInt(currentPos) - 1;
    if (currentPos === "0") {
      slider.states["switch"]("pos0");
      return;
    }
    return slider.states["switch"]("pos" + prevPos);
  };

  goPrev = _.debounce(goPrev, 100, true);

  slider.states.add({
    pos0: {
      x: 0
    },
    pos1: {
      x: -375
    },
    pos2: {
      x: -750
    },
    pos3: {
      x: -1125
    },
    pos4: {
      x: -375 * 4
    }
  });

  startingPos = _.random(0, 4);

  slider.states.switchInstant("pos" + startingPos);

  slider.draggable.enabled = false;

  updateWordCount();

}).call(this);
